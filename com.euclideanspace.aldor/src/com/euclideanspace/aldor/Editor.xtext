grammar com.euclideanspace.aldor.Editor hidden ()

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate editor "http://www.euclideanspace.com/aldor/Editor"

/* Copyright 2014 Martin John Baker
 *
 * This file is part of EuclideanSpace.
 *
 * EuclideanSpace is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * EuclideanSpace is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with EuclideanSpace. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 *
 * Here we are using a LL(*) recursive-descent parser generator and this
 * may not be able to exactly replicate axl.z which is a
 * LALR(1) conflict-free grammar for Aldor.
 * 
 * known bugs
 * ----------
 * 1) {....} block insists on semicolon after block {....};
 * 2) this does not work: MiniList(S: BasicType): LinearAggregate(S) = add {
 * 3) + or - as prefix operator
 */

/*
 * replaces Goal rule in Aldor grammar
 * 
 * #include is not in axl.z grammar, I assume the includes are
 * done before the grammar is called. So I have added include
 * support here.
 * 
 */
Model hidden(WS,KW_NEWLINE):
  ('#include' insert+=TK_STRING)*
  cc=CurlyContents_Labeled
;

////////// start of lexer rules ///////////////

/* ID consists of alpha (upper or lower case) followed by alphanumeric
 * any other character can stand in for alpha if prefixed by '_'
 * for instance a multiply function is often named '_*'
 * IDs can also end with ? or ! where:
 * '?' indicates a function which returns a boolean value
 * '!' indicates a function which changes an existing domain value
 * (in a mutable domain)
 */
terminal TK_ID : ('a'..'z'|'A'..'Z'|('_'.)) ('a'..'z'|'A'..'Z'|('_'.)|'0'..'9')*'!'?'?'?;

/* whitespace on single line overrides default whitespace
 * does not include newline unless it follows underscore.
 * I would have liked to do this as follows:
 * terminal WS : (' '|'\t'|'_'(('\r'|'\n')+))+;
 * problem: unfortunately use of underscore in this way masks the use of underscore
 * in ID. We therefore need to remove this type of underscore in a
 * preprocessor
 */
terminal WS : (' '|'\t')+;

/* at least one newline or carriage return character.
 * This is not included with WS because whitespace is significant in Aldor/SPAD.
 * We usually absorb newlines like this: NL+ which absorbs any number of
 * blank lines and it also supports both the Linux and the Windows forms of
 * newlines.
 * {KW_NewLine, 0,"\n", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
 */
terminal KW_NEWLINE: ('\r'|'\n') ;

/* overwriting TK_COMMENTS we do not want Java syntax (//) but Aldor/spad syntax (--)
 * This absorbs everything from '--' or '++' to the end of the line (but not
 * including the newline or carriage return characters)
 * 
 *  {TK_PREDOC, 0,"TK_PREDOC", 1, 1, 0, 0, 0, 0, 1, 0, 170, 0},
    {TK_POSTDOC, 0,"TK_POSTDOC", 1, 1, 0, 0, 0, 0, 1, 0, 170, 0},
    {TK_COMMENT, 0,"TK_COMMENT", 1, 1, 0, 0, 0, 0, 1, 0, 170, 0},
 */
//terminal TK_COMMENT :
//  ('--'|'++') !('\n'|'\r')* ;//('\r'|'\n')?;

terminal TK_PREDOC :
  ('--') !('\n'|'\r')* ;//('\r'|'\n')?;

terminal TK_POSTDOC :
  ('++') !('\n'|'\r')* ;//('\r'|'\n')?;
  

/* string literals are enclosed in double quotes
 *         {TK_STRING, 0,"TK_STRING", 1, 0, 0, 0, 0, 0, 1, 0, 170, 0},
*/
terminal TK_STRING :
'"' ( !('"') )* '"'
;

/*
 * Integer Literal
 *
 * {TK_INT, 0,"TK_INT", 1, 0, 0, 0, 0, 0, 1, 0, 170, 0},
 */
terminal TK_INT returns ecore::EInt: ('0'..'9')+;

/*
 * Floating Point Literal
 * This must be defined after: integer literal, otherwise integers will be hidden.
 * 
 * For a discussion about how to implement floats see this page:
 * http://www.euclideanspace.com/software/development/eclipse/xtext/grammar/lexer/index.htm#float
 */
terminal TK_FLOAT:
	TK_INT ('e' | 'E') ('+' | '-')? TK_INT;
    
/* grouping
* {KW_OBBrack, 0,"[|", 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
* {KW_OBCurly, 0,"{|", 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
* {KW_OBParen, 0,"(|", 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
* 
* {KW_CBBrack, 0,"|]", 0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
* {KW_CBCurly, 0,"|}", 0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
* {KW_CBParen, 0,"|)", 0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
* {KW_2Bar, 0,"||", 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
* 
*/

/* '
* {KW_QUOTE, 0,"'", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
*/
terminal KW_QUOTE: "'";
/* (
* {KW_OPAREN, 0,"(", 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
*/
terminal KW_OPAREN: '(';
/* )
* {KW_CPAREN, 0,")", 0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
*/
terminal KW_CPAREN: ')';
/* {
* {KW_OCURLY, 0,"{", 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
*/
terminal KW_OCURLY: '{';
/* }
* {KW_CCURLY, 0,"}", 0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
*/
terminal KW_CCURLY: '}';
/* [
* {KW_OBRACK, 0,"[", 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
*/
terminal KW_OBRACK: '[';
/* ]
* {KW_CBRACK, 0,"]", 0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
*/
terminal KW_CBRACK: ']';
/*
terminal LBANANA '(|';
terminal RBANANA '|)';
terminal EBRACKET '[__]';
terminal EBRACKET2 '[]';
terminal EBRACE '{__}';
terminal EBRACE2 '{}';
terminal LBANANABRACKET '[|';
terminal RBANANABRACKET '|]';
terminal EBANANABRACKET '[|__|]';
terminal EBANANABRACKET2 '[||]';
terminal LBANANABRACE '{|';
terminal RBANANABRACE '|}';
terminal EBANANABRACE '{|__|}';
terminal EBANANABRACE2 '{||}'; */
/* <<
* {KW_2LT, 0,"<<", 0, 0, 0, 0, 0, 0, 1, 1, 100, 0},
*/
terminal KW_2LT: '<<';
/* >>
* {KW_2GT, 0,">>", 0, 0, 0, 0, 0, 0, 1, 1, 100, 0},
*/
terminal KW_2GT: '>>';
/*terminal QUOTE "'";
terminal BACKQUOTE "`";*/

// operators
/* ==> MDEF or MARROW
* {KW_MARROW, 0,"==>", 0, 0, 0, 0, 1, 0, 0, 1, 25, 0},
*/
terminal KW_MARROW: '==>';
/* |
* {KW_Bar, 0,"|", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
*/
terminal KW_BAR: '|';
/* .
* {KW_DOT, 0,".", 0, 0, 0, 0, 1, 0, 1, 1, 170, 0},
*/
terminal KW_DOT: '.';
/* :: 2Colon or coerce
* {KW_2Colon, 0,"::", 0, 0, 0, 0, 1, 0, 1, 1, 150, 0},
*/
terminal KW_2COLON: '::';
/* :*
* {KW_ColonStar, 0,":*", 0, 0, 0, 0, 1, 0, 1, 1, 36, 0},
*/
terminal KW_COLONSTAR: ':*';
/* :
* {KW_Colon, 0,":", 0, 0, 0, 0, 1, 0, 1, 1, 36, 0},
*/
terminal KW_COLON: ':';
/* @
* {KW_At, 0,"@", 0, 0, 0, 0, 0, 0, 1, 1, 150, 0},
*/
terminal KW_AT: '@';
/* , 
 * {KW_Comma, 0,",", 0, 0, 0, 0, 1, 0, 1, 1, 11, 0},
 */
terminal KW_COMMA: ',';
/* ;
* {KW_SEMICOLON, 0,";", 0, 0, 0, 0, 0, 0, 1, 0, 10, 0},
*/
terminal KW_SEMICOLON: ';';
/* ** 2star or power
* {KW_2STAR, 0,"**", 0, 0, 0, 0, 0, 0, 1, 1, 140, 0},
*/
terminal KW_2STAR: '**';
/* * times or star
* {KW_STAR, 0,"*", 0, 0, 0, 0, 0, 0, 1, 1, 130, 0},
*/
terminal KW_STAR: '*';
/* + plus
* {KW_PLUS, 0,"+", 0, 0, 0, 0, 0, 0, 1, 1, 120, 0},
*/
terminal KW_PLUS: '+';
/* -
* {KW_MINUS, 0,"-", 0, 0, 0, 0, 0, 0, 1, 1, 120, 0},
*/
terminal KW_MINUS: '-';
/* +-
* {KW_PLUSMINUS, 0,"+-", 0, 0, 0, 0, 0, 0, 1, 1, 120, 0},
*/
terminal KW_PLUSMINUS: '+-';
/* <
* {KW_GT, 0,">", 0, 0, 0, 0, 0, 0, 1, 1, 100, 0},
* {KW_GE, 0,">=", 0, 0, 0, 0, 0, 0, 1, 1, 100, 0},
* {KW_LT, 0,"<", 0, 0, 0, 0, 0, 0, 1, 1, 100, 0},
* {KW_LE, 0,"<=", 0, 0, 0, 0, 0, 0, 1, 1, 100, 0},
*/
terminal KW_LT: '<';
/* > */
terminal KW_GT: '>';
/* <= */
terminal KW_LE: '<=';
/* >= */
terminal KW_GE: '>=';
/* = equal
* {KW_EQ, 0,"=", 0, 0, 0, 0, 0, 0, 1, 1, 100, 0},
*/
terminal KW_EQ: '=';
/* ~= not-equal or tilde-equal
 * {KW_TILDEE, 0,"~=", 0, 0, 0, 0, 0, 0, 1, 1, 90, 0},
 */
terminal KW_TILDEE: '~=';
/* ^= hat-equal
* {KW_HATE, 0,"^=", 0, 0, 0, 0, 0, 0, 1, 1, 90, 0},
*/
terminal KW_HATE: '^=';
/* ~
* {KW_TILDE, 0,"~", 0, 0, 0, 0, 0, 0, 0, 1, 150, 0},
*/
terminal KW_TILDE: '~';
/* ^ hat or carat
* {KW_HAT, 0,"^", 0, 0, 0, 0, 0, 0, 1, 1, 140, 0},
*/
terminal KW_HAT: '^';
/* .. 2Dot or seg
*{KW_2DOT, 0,"..", 0, 0, 0, 0, 0, 0, 1, 1, 110, 0},
* 
*/
terminal KW_2DOT: '..';
/* # Hash or Sharp
* {KW_SHARP, 0,"#", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
*/
terminal KW_SHARP: '#';
/* &
* {KW_Ampersand, 0,"&", 0, 0, 0, 0, 0, 0, 1, 0, 160, 0},
*/
terminal KW_AMPERSAND: '&';
/* $
* {KW_DOLLAR, 0,"$", 0, 0, 0, 0, 1, 0, 0, 1, 70, 0},
*/
terminal KW_DOLLAR: '$';
/* /
* {KW_SLASH, 0,"/", 0, 0, 0, 0, 0, 0, 1, 1, 130, 0},
*/
terminal KW_SLASH: '/';
/*
 * {KW_BACKSLASH, 0,"\\", 0, 0, 0, 0, 0, 0, 1, 1, 130, 0},
 */
terminal KW_BACKSLASH: '\\';
//terminal SLASHSLASH: '//';
//terminal BACKSLASHBACKSLASH: '\\\\';
/* '/\\' SLASH-BACKSLASH or wedge
 * outer product or logical 'and'
* {KW_WEDGE, 0,"/\\", 0, 0, 0, 0, 0, 0, 1, 1, 40, 0},
*/
terminal KW_WEDGE: '/\\';
/* \\/ BACKSLASH-SLASH or vee
* inner product or logical 'or'
* {KW_VEE, 0,"\\/", 0, 0, 0, 0, 0, 0, 1, 1, 40, 0},
*/
terminal KW_VEE: '\\/';
/* *$ multiply with specific type*/
//terminal TIMESDOLAR: '*$';
/* /$ divide with specific type*/
//terminal DIVDOLAR: '/$';
/* +$ add with specific type*/
//terminal PLUSDOLAR: '+$';
/* -$ subtract or minus with specific type*/
//terminal MINUSDOLAR: '-$';
/* =$ equals with specific type*/
//terminal EQUALSDOLAR: '=$';
/* '=>' implies or exit
* {KW_Implies, 0,"=>", 0, 0, 0, 0, 0, 0, 1, 1, 35, 0},
*/
terminal KW_IMPLIES: '=>';
/* := Assign or Becomes
* {KW_Assign, 0,":=", 0, 0, 0, 0, 1, 0, 0, 1, 20, 0},
*/
terminal KW_ASSIGN: ':=';
/* == 2eq or def
* {KW_2EQ, 0,"==", 0, 0, 0, 0, 1, 0, 0, 1, 25, 0},
*/
terminal KW_2EQ: '==';
/* -> right-arrow
* {KW_RARROW, 0,"->", 0, 0, 0, 0, 0, 0, 0, 1, 80, 0},
*/
terminal KW_RARROW: '->';
terminal KW_LARROW: '<-';
/* +-> gives or maps-to
* {KW_MAPSTO, 0,"+->", 0, 0, 0, 0, 1, 0, 1, 1, 30, 0},
*/
terminal KW_MAPSTO: '+->';
/* +->*
* {KW_MAPSTOStar, 0,"+->*", 0, 0, 0, 0, 1, 0, 1, 1, 30, 0},
*/
terminal KW_MAPSTOSTAR: '+->*';
/* ->* gives or maps-to
* {KW_MAPSTAR, 0,"->*", 0, 0, 0, 0, 0, 0, 0, 1, 80, 0},
*/
terminal KW_MAPSTAR: '->*';
/* % represents an instance of this type */
//terminal PERCENT: '%';
/* '% */
//terminal PRIMEPERCENT: "'%";
/* ... */
//terminal ELLIPSIS: '...';
/* +/ takes the sum of a list */
//terminal SUMLIST: '+/';
terminal ANY_OTHER: .;

////////// end of lexer rules ///////////////

/* error seems to be defined externally in Aldor grammar
 * so I have added this rule so it will compile
 */
error hidden(WS,KW_NEWLINE):
	'error'
;

Expression hidden(WS,KW_NEWLINE):
  enlist1a_Labeled_Semicolon_AB
;

/* An '.as' file is effectively a list of 'Labeled' 
 * separated by semicolons
 *
 * Labeled can be an expression or a Declaration such
 * as 'macro','extend','local','free','fluid','default'
 * 'define','fix','inline','import' or 'export'.
 */
Labeled hidden(WS,KW_NEWLINE):
 c=Comma
| d=Declaration
| (KW_AT a=Atom lab=Labeled?)
;

/*
 * A Declaration starts with one of the following key
 * words: 'macro','extend','local','free','fluid','default'
 * 'define','fix','inline','import' or 'export'.
 */
Declaration hidden(WS,KW_NEWLINE):
 {DeclarationMacro}'macro' mb=MacroBody
| {DeclarationExtend}'extend' si=Sig
| {DeclarationLocal}'local' si=Sig
| {DeclarationFree}'free' si=Sig
| {DeclarationFluid}'fluid' si=Sig
| {DeclarationDefault}'default' si=Sig
| {DeclarationDefine}'define' si=Sig
| {DeclarationFix}'fix' si=Sig
| {DeclarationInline}'inline' si=Sig? fp=FromPart?
| {DeclarationImport}'import' si=Sig? fp=FromPart?
| {DeclarationExport} ed=ExportDecl
;

ExportDecl hidden(WS,KW_NEWLINE):
	{ExportDecl}
'export' s=Sig?
| =>('export' s=Sig? tp=ToPart)
| =>('export' s=Sig? fp=FromPart)
;

ToPart hidden(WS,KW_NEWLINE):
 'to' Infixed
;

FromPart hidden(WS,KW_NEWLINE):
 'from' enlist1_Infixed_Comma_AB
;

MacroBody hidden(WS,KW_NEWLINE):
Sig
| ExportDecl
| 'import' Sig fp=FromPart?
;

Sig hidden(WS,KW_NEWLINE):
 DeclBinding
| Block
;

/* declare type with ':' or ':*' */
DeclPart hidden(WS,KW_NEWLINE):
 KW_COLON Type
| KW_COLONSTAR Type
;

/*
 * CommaItem (',' CommaItem)*
 */
Comma hidden(WS,KW_NEWLINE):
  enlist1_CommaItem_Comma_AB
;

CommaItem hidden(WS,KW_NEWLINE):
 Binding_AnyStatement =>('where' ci+=CommaItem)*
;

/*
 * DeclBinding
 */
DeclBinding hidden(WS,KW_NEWLINE):
  BindingR_InfixedExprsDecl_AnyStatement
;

InfixedExprsDecl hidden(WS,KW_NEWLINE):
 InfixedExprs dp+=DeclPart*
;

InfixedExprs hidden(WS,KW_NEWLINE):
 enlist1_InfixedExpr_Comma_AB
;

/*
 * Bindings
 * 
 * Substituted Rules in Xtext:
 * Binding_BalStatement
 * Binding_AnyStatement
 * Binding_BalStatement
 * Binding_InfixedExprsDecl
 * Binding_Collection
 * Binding(E)
 * : BindingL(Infixed,E)
 * ;
 */
Binding_AnyStatement hidden(WS,KW_NEWLINE):
  BindingL_Infixed_AnyStatement
;

Binding_BalStatement hidden(WS,KW_NEWLINE):
  BindingL_Infixed_BalStatement
;

Binding_Collection hidden(WS,KW_NEWLINE):
  BindingL_Infixed_Collection
;

 /* This rule allows any statement or new: Assign, Define or Lambda 
  */
BindingL_Infixed_AnyStatement hidden(WS,KW_NEWLINE):
 =>(lft=Infixed
      op=(KW_ASSIGN|KW_2EQ|KW_MARROW|KW_MAPSTO|KW_MAPSTOSTAR) bia=BindingL_Infixed_AnyStatement)
 |
 bas9=AnyStatement
;

BindingL_Infixed_BalStatement hidden(WS,KW_NEWLINE):
 =>(lft=Infixed op=(KW_ASSIGN|KW_2EQ|KW_MARROW|KW_MAPSTO|KW_MAPSTOSTAR) bia=BindingL_Infixed_BalStatement)
 |
 bas9=BalStatement
;

BindingL_Infixed_Collection hidden(WS,KW_NEWLINE):
 =>(lft=Infixed op=(KW_ASSIGN|KW_2EQ|KW_MARROW|KW_MAPSTO|KW_MAPSTOSTAR) bia=BindingL_Infixed_Collection)
 |
 bas9=Collection
;

/* Substituted Rules in Xtext:
 * BindingR(InfixedExprsDecl,AnyStatement)
 * BindingR(R,L)
 * : R
 * | R KW_Assign Binding(L)
 * { $$ = abNewAssign(APOS($1),$1,$3); }
 * | R KW_2EQ Binding(L)
 * { $$ = abNewDefine(APOS($1),$1,$3); }
 * | R KW_MARROW Binding(L)
 * { $$ = abNewMDefine(APOS($1),$1,$3); }
 * | R KW_MAPSTO Binding(L)
 * { $$ = abNewLambda(APOS($1),$1,abZip,$3); }
 * | R KW_MAPSTOStar Binding(L)
 * { $$ = abNewPLambda(APOS($1),$1,abZip,$3); }
 * ;
 */
//BindingR_InfixedExprsDecl_AnyStatement hidden(WS,KW_NEWLINE):
// InfixedExprsDecl
//| => (InfixedExprsDecl 'assign' bas=Binding_AnyStatement)
//| => (InfixedExprsDecl KW_2EQ bas=Binding_AnyStatement)
//| => (InfixedExprsDecl KW_MARROW bas=Binding_AnyStatement)
//| => (InfixedExprsDecl KW_MAPSTO bas=Binding_AnyStatement)
//| => (InfixedExprsDecl KW_MAPSTOSTAR bas=Binding_AnyStatement)
//;
BindingR_InfixedExprsDecl_AnyStatement hidden(WS,KW_NEWLINE):
 InfixedExprsDecl (
   (KW_ASSIGN|KW_2EQ|KW_MARROW|KW_MAPSTO|KW_MAPSTOSTAR)
     bas=Binding_AnyStatement)?
;

/*
 * Statements
 *
 * It is easier to spot conflicts when explicitly handling dangling else.
 */
AnyStatement hidden(WS,KW_NEWLINE):
 =>('if' CommaItem 'then' bas=Binding_AnyStatement)
  |
  Flow_AnyStatement
;

/* 
 */
BalStatement hidden(WS,KW_NEWLINE):
 Flow_BalStatement
;

/* Substituted Rules in Xtext:
Flow(XX) -> Flow_AnyStatement or Flow_BalStatement
//Flow(XX)
//: Collection
//| KW_If CommaItem KW_Then Binding_BalStatement KW_Else Binding(XX)
//{ $$ = abNewIf(TPOS($1), TEST($2),$4,$6); }
//| Collection KW_Implies Binding(XX)
//{ $$ = abNewExit(TPOS($2), TEST($1),$3); }
//| Iterators KW_Repeat Binding(XX)
//{ $$ = abNewRepeatOL(TPOS($2),$3,$1); listFree(AbSyn)($1); }
//| KW_Repeat Binding(XX)
//{ $$ = abNewRepeat0(TPOS($1),$2); }
//| KW_Try Binding_AnyStatement) KW_But ButExpr AlwaysPart(XX)
//{ (void)parseDeprecated(KW_But, abNewNothing(TPOS($3))); $$ = abNewTry(TPOS($1),$2,$4->abSequence.argv[0], $4->abSequence.argv[1],$5); }
//| KW_Try Binding_AnyStatement) KW_Catch ButExpr AlwaysPart(XX)
//{ $$ = abNewTry(TPOS($1),$2,$4->abSequence.argv[0], $4->abSequence.argv[1],$5); }
//| KW_Select Binding_AnyStatement) KW_In Cases
//{ $$ = abNewSelect(TPOS($1),$2,$4); }
//| KW_Do Binding(XX)
//{ $$ = abNewDo(TPOS($1),$2); }
//| KW_Delay Binding(XX)
//{ $$ = abNewDelay(TPOS($1),$2); }
//| KW_Reference Binding(XX)
//{ $$ = abNewReference(TPOS($1),$2); }
//| KW_Generate GenBound Binding(XX)
//{ $$ = abNewGenerate(TPOS($1),$2,$3); }
//| KW_Assert Binding(XX)
//{ $$ = abNewAssert(TPOS($1),TEST($2)); }
//| KW_Iterate opt(Name)
//{ $$ = abNewIterate(TPOS($1),$2); }
//| KW_Break opt(Name)
//{ $$ = abNewBreak(TPOS($1),$2); }
//| KW_Return opt(Collection)
//{ $$ = abNewReturn(TPOS($1),$2); }
//| KW_Yield Binding(XX)
//{ $$ = abNewYield(TPOS($1),$2); }
//| KW_Except Binding(XX)
//{ $$ = parseDeprecated(KW_Except, abNewRaise(TPOS($1),$2)); }
//| KW_Throw Binding(XX)
//{ $$ = abNewRaise(TPOS($1),$2); }
//| KW_Goto Id
//{ $$ = abNewGoto(TPOS($1),$2); }
//| KW_Never
//{ $$ = abNewNever(TPOS($1)); }
//;
*/
Flow_AnyStatement hidden(WS,KW_NEWLINE):
 (c=Collection (st='implies' bas2=Binding_AnyStatement)?) // '.... for' or 'while ....'
| (st='if' ci=CommaItem 'then' bbs=Binding_BalStatement =>'else' bas=Binding_AnyStatement)
| =>(Iterators st='repeat' bas3=Binding_AnyStatement) // 'for .... in' or 'while ....'
| (st='repeat' bas=Binding_AnyStatement)
| (st='try' bas=Binding_AnyStatement ('but'|'catch') be2=ButExpr apa=AlwaysPart_AnyStatement)
| (st='select' bas=Binding_AnyStatement 'in' ca=Cases)
| (st='do' bas=Binding_AnyStatement)
| (st='delay' bas=Binding_AnyStatement)
| (st='reference' bas=Binding_AnyStatement)
| (st='generate' gb=GenBound bas4=Binding_AnyStatement)
| (st='assert' bas=Binding_AnyStatement)
| (st='iterate' n=Name?)
| (st='break' n=Name?)
| (st='return' c=Collection?)
| (st='yield' bas=Binding_AnyStatement)
| (st='except' bas=Binding_AnyStatement)
| (st='throw' bas=Binding_AnyStatement)
| (st='goto' i2=Id)
| (st='never')
;

/*  */
Flow_BalStatement hidden(WS,KW_NEWLINE):
	(c2=Collection (st2='implies' bbs3=Binding_BalStatement)?) // '.... for' or 'while ....'
| (st2='if' ci2=CommaItem 'then' bbs4+=Binding_BalStatement =>'else' bbs4+=Binding_BalStatement)
| => (Iterators st2='repeat' bbs3=Binding_BalStatement) // 'for .... in' or 'while ....'
| (st2='repeat' bbs5=Binding_BalStatement)
| (st2='try' bbs2=Binding_AnyStatement ('but'|'catch') be=ButExpr apb=AlwaysPart_BalStatement)
| (st2='select' bbs2=Binding_AnyStatement 'in' ca2=Cases)
| (st2='do' bbs5=Binding_BalStatement)
| (st2='delay' bbs5=Binding_BalStatement)
| (st2='reference' bbs5=Binding_BalStatement)
| (st2='generate' gb2=GenBound bbs5=Binding_BalStatement)
| (st2='assert' bbs5=Binding_BalStatement)
| (st2='iterate' n2=Name?)
| (st2='break' n2=Name?)
| (st2='return' c2=Collection?)
| (st2='yield' bbs5=Binding_BalStatement)
| (st2='except' bbs5=Binding_BalStatement)
| (st2='throw' bbs5=Binding_BalStatement)
| (st2='goto' i3=Id)
| (st2='never')
;

GenBound hidden(WS,KW_NEWLINE):
	{GenBound}
  ('to' ci=CommaItem 'of')?
;

ButExpr hidden(WS,KW_NEWLINE):
	{ButExpr}
  (db=DeclBinding 'in' ca=Cases)?
;

Cases hidden(WS,KW_NEWLINE):
 Binding_Collection
;

/* Substituted Rules in Xtext:
* AlwaysPart(XX) -> AlwaysPart_AnyStatement
*                or AlwaysPart_BalStatement
* AlwaysPart(XX)
* : KW_Always Binding(XX)
* { (void)parseDeprecated(KW_Always, abNewNothing(TPOS($1))); $$ = $2; }
* | KW_Finally Binding(XX)
* { $$ = $2; }
* | Nothing
//;
*/
AlwaysPart_AnyStatement hidden(WS,KW_NEWLINE):
	{AlwaysPart_AnyStatement}
 ('always' bas7=Binding_AnyStatement
| 'finally' bas7=Binding_AnyStatement)?
;

AlwaysPart_BalStatement hidden(WS,KW_NEWLINE):
	{AlwaysPart_BalStatement}
( 'always' bas7=Binding_BalStatement
| 'finally' bas7=Binding_BalStatement)?
;

/*
 * infixed optionally followed by Iterators
 * .... for .... in .... | ....
 * while ....
 */
Collection hidden(WS,KW_NEWLINE):
 Infixed i3=Iterators // iterators allow for zero cases
;

/* Zero or more iterators: for....in or while.... */
Iterators hidden(WS,KW_NEWLINE):
 Iterators1
;

/* Zero or more iterators: for....in or while.... */
Iterators1 hidden(WS,KW_NEWLINE):
	{Iterators1}
  itr += Iterator*
;

/* Iterator: for....in or while.... */
Iterator hidden(WS,KW_NEWLINE):
('for' ForLhs 'in' i=Infixed sp=SuchthatPart?)
| ('while' i=Infixed)
;

ForLhs hidden(WS,KW_NEWLINE):
  ('free'|'local'|'fluid')? Infixed
;

SuchthatPart hidden(WS,KW_NEWLINE):
 KW_BAR Infixed
;

/*
 * Infixed Expressions
 * Either:
 * an expression
 * or a typed expression
 * or a block (CurlyContents_Labeled inside curly brackets)
 */
Infixed hidden(WS,KW_NEWLINE):
 (ifx=InfixedExpr dp=DeclPart?)
 |
  b=Block
;

/*
 * if we enable 'returns Expr' then 'E11_E12' replaces id in AST
 */
InfixedExpr /*returns Expr*/ hidden(WS,KW_NEWLINE):
 E11_Op
| =>E3
;

/*
 * 'and','or' logic operators
 * need to allow a 'qualified op', that is an operation followed by '$' and a type
 */
E3 returns Expr hidden(WS,KW_NEWLINE):
  E4 ({E3.left=current} op=('and'|'or'|LatticeTok /*QualOp_LatticeTok*/) right=E4)*
;

/* relation operators
 * in YACC version this rule also includes relation operators as prefix
 * but for Antlr we need to move prefix operators somewhere else
 * 
 * need to allow a 'qualified op', that is an operation followed by '$' and a type
 */
E4 returns Expr hidden(WS,KW_NEWLINE):
 (E5 ({E4.left=current}op=('has'|RelationTok /*RelationOp*/) right=E5)*)
//| (RelationOp {E4.left=current} right+=E5)
;

/* segment operators: '..' and 'by'
 * in YACC version this rule also includes segment operators as postfix
 * but for Antlr we need to move postfix operators somewhere else
 * 
 * need to allow a 'qualified op', that is an operation followed by '$' and a type
 */
E5 returns Expr hidden(WS,KW_NEWLINE):
//=>
  (E6 ({E5.left=current}op=SegTok /*SegOp*/ right=E6)*)
//| (left=E6 {E5.left=current} op5+=SegOp)
;

/*
 * in YACC version this rule also includes relation operators as prefix (unary plus)
 * but for Antlr we need to move prefix operators somewhere else
 * 
 * need to allow a 'qualified op', that is an operation followed by '$' and a type
 */
E6 returns Expr hidden(WS,KW_NEWLINE):
 (E7 ({E6.left=current}op=PlusTok /*PlusOp*/ right=E7)*)
//| (op6+=PlusOp right=E7)
;

/*
 * quotient operations
 * 
 * need to allow a 'qualified op', that is an operation followed by '$' and a type
 */
E7 returns Expr hidden(WS,KW_NEWLINE):
 E8 ({E7.left=current}op=QuotientTok /*QuotientOp*/ right=E8)*
;

/*
 * multiplication operations
 * 
 * need to allow a 'qualified op', that is an operation followed by '$' and a type
 */
E8 returns Expr hidden(WS,KW_NEWLINE):
 E9 ({E8.left=current}op=TimesTok /*TimesOp*/ right=E9)*
;

/*
 * exponent operations
 * 
 * need to allow a 'qualified op', that is an operation followed by '$' and a type
 */
E9 returns Expr hidden(WS,KW_NEWLINE):
 E11_E12 ({E9.left=current}op=PowerTok /*PowerOp*/ right=E11_E12)*
;
 
/*
 * This version of E11 is used in the middle of the precedence stack
 */
E11_E12 returns Expr hidden(WS,KW_NEWLINE):
	(E12 ({E11_E12.left=current}(op=KW_2COLON|op=KW_AT|op='pretend') right=E12)*)
;

/*
 * This version of E11 is used at the top of the precedence stack in
 * 'InfixedExpr'
 */
E11_Op returns Expr hidden(WS,KW_NEWLINE):
	(Op ({E11_Op.left=current}(op=KW_2COLON|op=KW_AT|op='pretend') right=E12)*)
;

/*
 * use this rule when we know it is a type.
 * That is in 'DeclPart' where it follows '$'
 */
Type hidden(WS,KW_NEWLINE):
	E11_E12
;

E12 returns Expr hidden(WS,KW_NEWLINE):
  (E13 ({E12.left=current}op=ArrowOp right=E13)*)
;

E13 returns Expr hidden(WS,KW_NEWLINE):
  (E14 ({E13.left=current}op=KW_DOLLAR right=QualTail)*)
;

QualTail hidden(WS,KW_NEWLINE):
 LeftJuxtaposed =>(KW_DOLLAR qt=QualTail)?
;

OpQualTail hidden(WS,KW_NEWLINE):
 nam=Molecule => (KW_DOLLAR OpQualTail)?
;

E14 hidden(WS,KW_NEWLINE):
 e15left=E15
| => (e15left=E15? op='with' dm=DeclMolecule)
| => (e15left=E15? op='add' dm=DeclMolecule)
| => (e15left=E15 op='except' e15right=E15)
| => (e15left=E15 op='throw' e15right=E15)
;

E15 hidden(WS,KW_NEWLINE):
  Application
;

/*
 * Infixed Operations
 */
Op hidden(WS,KW_NEWLINE):
 {Op}aop=ArrowOp
| {Op}aop=LatticeOp
| {Op}aop=RelationOp
| {Op}aop=SegOp
| {Op}aop=PlusOp
| {Op}aop=QuotientOp
| {Op}aop=TimesOp
| {Op}aop=PowerOp
;

NakedOp hidden(WS,KW_NEWLINE):
 UnqualOp_ArrowTok
| UnqualOp_LatticeTok
| UnqualOp_RelationTok
| UnqualOp_SegTok
| UnqualOp_PlusTok
| UnqualOp_QuotientTok
| UnqualOp_TimesTok
| UnqualOp_PowerTok
;

ArrowOp hidden(WS,KW_NEWLINE): QualOp_ArrowTok;
LatticeOp hidden(WS,KW_NEWLINE): QualOp_LatticeTok;
RelationOp hidden(WS,KW_NEWLINE): QualOp_RelationTok;
SegOp hidden(WS,KW_NEWLINE): QualOp_SegTok;
PlusOp hidden(WS,KW_NEWLINE): QualOp_PlusTok;
QuotientOp hidden(WS,KW_NEWLINE): QualOp_QuotientTok;
TimesOp hidden(WS,KW_NEWLINE): QualOp_TimesTok;
PowerOp hidden(WS,KW_NEWLINE): QualOp_PowerTok;

/* in Aldor grammar this is ArrowTok<tok> */
ArrowTok hidden(WS,KW_NEWLINE): KW_RARROW | KW_LARROW | KW_MAPSTAR ;
/* in Aldor grammar this is LatticeTok<tok> */
LatticeTok hidden(WS,KW_NEWLINE): KW_VEE | KW_WEDGE ;
/* in Aldor grammar this is RelationTok<tok> */
RelationTok hidden(WS,KW_NEWLINE):KW_EQ | KW_TILDEE | KW_HATE |
KW_GE | KW_GT | KW_2GT |
KW_LE | KW_LT | KW_2LT |
'is' | 'isnt' | 'case' ;
/* in Aldor grammar this is SegTok<tok> */
SegTok hidden(WS,KW_NEWLINE): KW_2DOT | 'by' ;
/* in Aldor grammar this is PlusTok<tok> */
PlusTok hidden(WS,KW_NEWLINE): KW_PLUS | KW_MINUS | KW_PLUSMINUS ;
/* in Aldor grammar this is QuotientTok<tok> */
QuotientTok hidden(WS,KW_NEWLINE):'mod' | 'quo' | 'rem' | 'exquo' ;
/* in Aldor grammar this is TimesTok<tok> */
TimesTok hidden(WS,KW_NEWLINE): KW_STAR | KW_SLASH | KW_BACKSLASH ;
/* in Aldor grammar this is PowerTok<tok> */
PowerTok hidden(WS,KW_NEWLINE): KW_2STAR | KW_HAT ;

/*
 * Function Application
 * We can express function application by using bracket notation like this:
 * f(a1, ..., an)
 * So the function is expressed as a prefix to its arguments.
 * If there is only one argument then Aldor also allows us to express
 * function application by using juxtaposed expressions.
 * 
 * There are two additional forms for specifying a prefix
 * application to one argument: juxtaposition and an infix dot.
 * 
 * f a
 * f.a
 * 
 * The second of these forms is completely equivalent to
 * f(a); the first is equivalent in a free-standing occurrence
 * but associates differently -- to the right, rather than
 * the left:
 * 
 *  f a b c      -- is equivalent to (f (a (b c)))
 *  f.a.b.c      -- is equivalent to (((f.a).b).c)
 *  f(a)(b)(c)   -- is equivalent to (((f(a))(b))(c))
 *
 */
Application hidden(WS,KW_NEWLINE):
 RightJuxtaposed
;

/*
 * implements 'function application' as described above including juxtaposition
 */
RightJuxtaposed hidden(WS,KW_NEWLINE):
 Jright_Molecule
;

/* Molecule followed by 0 or more BlockEnclosures (bracketed terms)
 * or variants on that theme.
 */
LeftJuxtaposed hidden(WS,KW_NEWLINE):
 Jleft_Molecule
;

/* 
 * implements 'function application' as described above including juxtaposition
 *
 * substituted version of axl.z code:
 * Jright(H) : Jleft(H) | Jleft(H) Jright(Atom)
 * | 'not' Jright(Atom)
 */
Jright_Molecule hidden(WS,KW_NEWLINE):
	(Jleft_Molecule (right=Jright_Atom)?)
	|
    ('not' right=Jright_Atom)
;

Jright_Atom hidden(WS,KW_NEWLINE):
	(Jleft_Atom (right2=Jright_Atom)?)
	|
	('not' right2=Jright_Atom)
;

/* Molecule followed by 0 or more BlockEnclosures (bracketed terms)
 * or variants on that theme.
 * 
 * matches:
 * - Molecule - no argument
 * - 'not' BlockEnclosure - not has one argument
 * - (*) BlockEnclosure
 * - (*) '.' BlockMolecule
 * 
 * substituted version of axl.z code:
 * Jleft(H) : H | 'not' BlockEnclosure
 *              | Jleft(H) BlockEnclosure
 *              | Jleft(H) KW_DOT BlockMolecule ;
 */
Jleft_Molecule hidden(WS,KW_NEWLINE):
('not' be+=BlockEnclosure)
| =>(m=Molecule be+=BlockEnclosure*)
| (m=Molecule (KW_DOT bm+=BlockMolecule)*)
;

/* 
 * matches:
 * - Atom - no argument
 * - 'not' BlockEnclosure - not has one argument
 * - (*) BlockEnclosure
 * - (*) '.' BlockMolecule
 * 
 * substituted version of axl.z code:
 * Jleft(H) : H | 'not' BlockEnclosure
 *              | Jleft(H) BlockEnclosure
 *              | Jleft(H) KW_DOT BlockMolecule ;
 */
Jleft_Atom hidden(WS,KW_NEWLINE):
('not' be+=BlockEnclosure)
| =>(a=Atom be+=BlockEnclosure*)
| (a=Atom (KW_DOT bm4+=BlockMolecule)*)
;

/*
 * Indivisible Expressions
 */
Molecule hidden(WS,KW_NEWLINE):
=>Atom
| Enclosure
;

/* expression in brackets parenthesis or quotes */
Enclosure hidden(WS,KW_NEWLINE):
  Parened
  |
  Bracketed
  |
  QuotedIds
;

/*
 * function application, block or infixed
 */
DeclMolecule hidden(WS,KW_NEWLINE):
	{DeclMolecule}
 a=Application?
| b=Block
;

/* atom, enclosure: (....),[....],"...." or block {....} */
BlockMolecule hidden(WS,KW_NEWLINE):
 Atom
| Enclosure
| Block
;

/* enclosure: (....),[....],"...." or block {....} */
BlockEnclosure hidden(WS,KW_NEWLINE):
Enclosure
| Block
;

/* CurlyContents_Labeled inside curly brackets */
Block hidden(WS,KW_NEWLINE):
// Piled(Expression)|
  Curly_Labeled
;

/* expression in parenthesis */
Parened hidden(WS,KW_NEWLINE):
 op=KW_OPAREN e=Expression? KW_CPAREN
;

/* expression in brackets */
Bracketed hidden(WS,KW_NEWLINE):
 op=KW_OBRACK e=Expression? KW_CBRACK
;

/* names in quotes */
QuotedIds hidden(WS,KW_NEWLINE):
	{QuotedIds}
 op=KW_QUOTE n=Names? KW_QUOTE
;

/* names seperated by commas */
Names hidden(WS,KW_NEWLINE):
  firstName=TK_ID
  (KW_COMMA subsequentNames+=TK_ID)*
;

/*
 * identifier or literal
 */
Atom hidden(WS,KW_NEWLINE):
 iden=Id
| lit=Literal
;

/* called from Flow_AnyStatement and Flow_BalStatement */
Name hidden(WS,KW_NEWLINE):
	{Name}
name=Id
| no=NakedOp
;

/* original Aldor grammar uses abNewOfToken which is defined
 * in Aldor file absyn.c: Abstract syntax construction and
 * manipulation.
 */
Id hidden(WS,KW_NEWLINE):
name=(TK_ID | KW_SHARP | KW_TILDE)
;

/* string, integer or float literal */
Literal hidden(WS,KW_NEWLINE):
  =>((TK_INT KW_DOT)? TK_FLOAT) // example 2.4e5 or 2e5
  |
  (=>(TK_INT KW_DOT)? TK_INT) // example 2.4 or 2
  |
  TK_STRING // example "abc"
;

/*
 * Meta-rules
 */

/* Substituted Rules in Xtext:
 * UnqualOp(ArrowTok)
 * UnqualOp(LatticeTok)
 * UnqualOp(RelationTok)
 * UnqualOp(SegTok)
 * UnqualOp(PlusTok)
 * UnqualOp(QuotientTok)
 * UnqualOp(TimesTok)
 * UnqualOp(PowerTok)
 * UnqualOp(op)
 * : op
 * { $$ = abNewOfToken(AB_Id, $1); }
 * ;
 */
UnqualOp_ArrowTok hidden(WS,KW_NEWLINE):
ArrowTok{ ArrowTok }
;
UnqualOp_LatticeTok hidden(WS,KW_NEWLINE):
LatticeTok{ LatticeTok }
;
UnqualOp_RelationTok hidden(WS,KW_NEWLINE):
RelationTok{ RelationTok }
;
UnqualOp_SegTok hidden(WS,KW_NEWLINE):
SegTok{ SegTok }
;
UnqualOp_PlusTok hidden(WS,KW_NEWLINE):
PlusTok{ PlusTok }
;
UnqualOp_QuotientTok hidden(WS,KW_NEWLINE):
QuotientTok{ QuotientTok }
;
UnqualOp_TimesTok hidden(WS,KW_NEWLINE):
TimesTok{ TimesTok }
;
UnqualOp_PowerTok hidden(WS,KW_NEWLINE):
PowerTok{ PowerTok }
;

/* Substituted Rules in Xtext:
 * QualOp(ArrowTok)
 * QualOp(LatticeTok)
 * QualOp(RelationTok)
 * QualOp(SegTok)
 * QualOp(PlusTok)
 * QualOp(QuotientTok)
 * QualOp(TimesTok)
 * QualOp(PowerTok)
 * QualOp(op)
 * : op
 * { $$ = abNewOfToken(AB_Id, $1); }
 * | op KW_DOLLAR OpQualTail
 * { $$ = abNewQualify(TPOS($1), abNewOfToken(AB_Id, $1), $3); }
 * ;
 */

QualOp_ArrowTok hidden(WS,KW_NEWLINE):
	{QualOp_ArrowTok}
ArrowTok =>(KW_DOLLAR oqt=OpQualTail)?
;

QualOp_LatticeTok hidden(WS,KW_NEWLINE):
	{QualOp_LatticeTok}
LatticeTok =>(KW_DOLLAR oqt=OpQualTail)?
;

/*InfixedExpr has non-LL(*) decision due to recursive rule
* invocations reachable from alts 1,2.  Resolve by left-factoring
* or using syntactic predicates or using backtrack=true option.
* 
* RelationTok is KW_EQ | KW_TILDEE | KW_HATE |
* KW_GE | KW_GT | KW_2GT |
* KW_LE | KW_LT | KW_2LT |
* 'is' | 'isnt' | 'case' ;
 */
QualOp_RelationTok hidden(WS,KW_NEWLINE):
//	'temp99'
{QualOp_RelationTok}
RelationTok (op+=KW_DOLLAR oqt=OpQualTail)?
;

QualOp_SegTok hidden(WS,KW_NEWLINE):
	{QualOp_SegTok}
SegTok (KW_DOLLAR oqt=OpQualTail)?
;

QualOp_PlusTok hidden(WS,KW_NEWLINE):
	{QualOp_PlusTok}
PlusTok (KW_DOLLAR oqt=OpQualTail)?
;

QualOp_QuotientTok hidden(WS,KW_NEWLINE):
	{QualOp_QuotientTok}
QuotientTok (KW_DOLLAR oqt=OpQualTail)?
;

QualOp_TimesTok hidden(WS,KW_NEWLINE):
	{QualOp_TimesTok}
TimesTok (KW_DOLLAR oqt=OpQualTail)?
;

QualOp_PowerTok hidden(WS,KW_NEWLINE):
	{QualOp_PowerTok}
PowerTok (KW_DOLLAR oqt=OpQualTail)?
;

/* ++ Doc. */

/* Substituted Rules in Xtext:
 * E is E from PileContents(E)
 */ 
//Doc(E)
//: PreDocument E PostDocument
//{
//$$ = $2;
//if($3) $$ = abNewDocumented(APOS($3),$$,$3);
//if($1) $$ = abNewDocumented(APOS($$),$$,$1);
//}
//;

//PreDocument hidden(WS,KW_NEWLINE):
//  PreDocumentList
//;

//PostDocument hidden(WS,KW_NEWLINE):
//  PostDocumentList
//;

/* list of lines starting with -- */
PreDocument hidden(WS,KW_NEWLINE):
  TK_PREDOC*
;

/* list of lines starting with ++ */
PostDocument hidden(WS,KW_NEWLINE):
  TK_POSTDOC*
;


/* CommaItem (',' CommaItem)*
*/
enlist1_CommaItem_Comma_AB hidden(WS,KW_NEWLINE):
  enlister1_CommaItem_Comma
;

/* Infixed (',' Infixed)*
*/
enlist1_Infixed_Comma_AB hidden(WS,KW_NEWLINE):
  enlister1_Infixed_Comma
;

/* InfixedExpr (',' InfixedExpr)*
*/
enlist1_InfixedExpr_Comma_AB hidden(WS,KW_NEWLINE):
  enlister1_InfixedExpr_Comma
;

/* CommaItem (',' CommaItem)*
*/
enlister1_CommaItem_Comma hidden(WS,KW_NEWLINE):
  CommaItem (KW_COMMA ci+=CommaItem)*
;

/* Infixed (',' Infixed)*
*/
enlister1_Infixed_Comma hidden(WS,KW_NEWLINE):
  Infixed (KW_COMMA i2+=Infixed)*
;

/* InfixedExpr (',' InfixedExpr)*
*/
enlister1_InfixedExpr_Comma hidden(WS,KW_NEWLINE):
  InfixedExpr (KW_COMMA ie+=InfixedExpr)*
;

/* A list of (at least one) statement(s)
 * seperated by semicolons (one or more)  and optionally ending with
 * a semicolon (zero or more)
 * 
 * AB_Sequence
 */ 
enlist1a_Labeled_Semicolon_AB hidden(WS,KW_NEWLINE):
  enlister1a_Labeled_Semicolon
;

/* A list of (at least one) statement(s)
 * seperated by (one or more) semicolons and optionally ending with
 * a semicolon (zero or more)
 * 
 * Aldor axl.z grammar defines this in a left recursive way so
 * we have to change to non-recursive structure here.
 */ 
enlister1a_Labeled_Semicolon hidden(WS,KW_NEWLINE):
  statemnts += Labeled
  (KW_SEMICOLON+ statemnts += Labeled)*
  KW_SEMICOLON*
;

/* Substituted Rules in Xtext:
* Piled(Expression)
* 
*/
/* Piled */
//Piled(E)
//: KW_SetTab PileContents(E) KW_BackTab
//{ $$ = abOneOrNewOfList(AB_Sequence,$2); listFree(AbSyn)($2); }
//;

/* Substituted Rules in Xtext:
* Curly(Labeled)
* 
*/
Curly_Labeled hidden(WS,KW_NEWLINE):
KW_OCURLY CurlyContents_Labeled KW_CCURLY
;

/* A list of (at least one) statement(s)
 * seperated by (one or more) semicolons and optionally ending with
 * a semicolon (zero or more)
 * 
 * This is similar to enlister1a_Labeled_Semicolon;
 * 
 * statements can have pre or post comments
 * 
 * called by Curly_Labeled and Model
 */ 
CurlyContents_Labeled hidden(WS,KW_NEWLINE):
  CurlyContentsList_Labeled
;

/* A list of (at least one) statement(s)
 * seperated by (one or more) semicolons and optionally ending with
 * a semicolon (zero or more)
 * 
 * This is similar to enlister1a_Labeled_Semicolon
 * 
 * statements can have pre or post comments
 */ 
CurlyContentsList_Labeled hidden(WS,KW_NEWLINE):
	statemts += CurlyContentB_Labeled
	//(statemts += CurlyContentB_Labeled?)
	(KW_SEMICOLON+ statemts += CurlyContentB_Labeled)*
	// need to change this line to:
	//(KW_SEMICOLON* statemts += CurlyContentB_Labeled)*
	// that is make semicolons optional but that causes non-LL(*) grammar
	KW_SEMICOLON*
;

/* List of 'Labeled' each one is terminated by semicolon
* 
* This rule is left recursive in the Aldor grammar so I have
* to change it here.
*/
//CurlyContent1_Labeled
//: Nothing
//| CurlyContent1_Labeled cca=CurlyContentA_Labeled
//;

/* Substituted Rules in Xtext:
* CurlyContentA(E) E is from CurlyContent1(E)
* 
*/
//CurlyContentA_Labeled
//: CurlyContentB_Labeled KW_SEMICOLON pd=PostDocument
//| error KW_SEMICOLON PostDocument
//;

/* Substituted Rules in Xtext:
* CurlyContentB(E) E is from CurlyContentA(E)
* or CurlyContentsList(E)
* 
*/
CurlyContentB_Labeled hidden(WS,KW_NEWLINE):
pred=PreDocument l=Labeled pd=PostDocument
;
