/* Copyright 2014 Martin John Baker
*
* This file is part of EuclideanSpace.
*
* EuclideanSpace is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* EuclideanSpace is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with EuclideanSpace. If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * stub generated by Xtext
 * Martin Baker added code to customise lexer.
 * See notes about customising lexer in xtext on page here:
 * http://www.euclideanspace.com/software/development/eclipse/xtext/grammar/lexer/custom/
 */
package com.euclideanspace.aldor;

import org.eclipse.xtext.nodemodel.impl.NodeModelBuilder;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class EditorRuntimeModule extends com.euclideanspace.aldor.AbstractEditorRuntimeModule {
	
	/**
	 * I want to customise the lexer.
	 * I have created CustomLexer.java to extend
     * com.euclideanspace.aldor.parser.antlr.internal.InternalEditorLexer.java
	 *
	 * AbstractEditorRuntimeModule seems to contain 3 methods that involve the lexer:
	 * - bindLexer()
	 * - provideInternalEditorLexer()
	 * - configureRuntimeLexer(binder)
	 * 
	 * So here we override two of these and replace the other.
	 */
	@Override
	public Class<? extends org.eclipse.xtext.parser.antlr.Lexer> bindLexer() {
		return com.euclideanspace.aldor.CustomLexer.class;
	}

	/**
     * I can't change the return type of provideInternalEditorLexer() in an override so instead
     * I have added a new method: provideInternalCustomEditorLexer().
	 */
	public com.google.inject.Provider<com.euclideanspace.aldor.CustomLexer>
	                             provideInternalCustomEditorLexer() {
	  return org.eclipse.xtext.parser.antlr.LexerProvider.create(
	    com.euclideanspace.aldor.CustomLexer.class);
	}

	/**
	 * override configureRuntimeLexer from:
     * com.euclideanspace.aldor.parser.antlr.internal.InternalEditorLexer.java
     */
	@Override
	public void configureRuntimeLexer(com.google.inject.Binder binder) {
		binder.bind(org.eclipse.xtext.parser.antlr.Lexer.class).annotatedWith(
	    com.google.inject.name.Names.named(
	      org.eclipse.xtext.parser.antlr.LexerBindings.RUNTIME
	    )
	  ).to(com.euclideanspace.aldor.CustomLexer.class);
	}
	
    /**
     * When I could not get the above to work I tried a possible alternative described
     * in this thread:
     * http://stackoverflow.com/questions/8039357/writing-a-custom-xtext-antlr-lexer-without-a-grammar-file
     * This customises the EditorParser and then changes its createLexer method to call
     * our custom lexer. 
     * However since the above overrides seem to be working I am no longer trying this approach.
     * I have left this here, commented out, in case I ever need to customise the parser
     * in the future.
     */
	public Class<? extends org.eclipse.xtext.parser.IParser> bindIParser() {
		return com.euclideanspace.aldor.CustomParser.class;
	}
	
	/**
	 * We need to customise the node model builder so that inserted nodes do not
	 * point back into text.
	 */
	public Class<? extends NodeModelBuilder> bindNodeModelBuilder() {
      return CustomNodeModelBuilder.class;
    }

	/**
	 * allows us to extend DefaultEcoreElementFactory (which builds the semantic model)
	 * No extensions at the moment.
	 */
	public Class<? extends org.eclipse.xtext.parser.IAstFactory> bindIAstFactory() {
		return CustomDefaultEcoreElementFactory.class;
	}

}
