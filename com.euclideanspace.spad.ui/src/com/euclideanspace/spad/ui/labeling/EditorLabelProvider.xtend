/*
* generated by Xtext
*/
package com.euclideanspace.spad.ui.labeling

import com.google.inject.Inject
import org.eclipse.xtext.util.Strings;
import com.euclideanspace.spad.editor.Model
import com.euclideanspace.spad.editor.CategoryDef
import com.euclideanspace.spad.editor.PackageDef
import com.euclideanspace.spad.editor.DomainDef
import com.euclideanspace.spad.editor.WherePart
import com.euclideanspace.spad.editor.WithPart
import com.euclideanspace.spad.editor.AddPart
import com.euclideanspace.spad.editor.AddStatements
import com.euclideanspace.spad.editor.FunctionDefinition
import com.euclideanspace.spad.editor.FunctionDefinitionBlock
import com.euclideanspace.spad.editor.FunctionSignature
import com.euclideanspace.spad.editor.MacroDef
import com.euclideanspace.spad.editor.Import
import com.euclideanspace.spad.editor.VariableDeclaration
import com.euclideanspace.spad.editor.VariableTyped
import com.euclideanspace.spad.editor.TypeWithName
import com.euclideanspace.spad.editor.VariableDeclarationBlock
import com.euclideanspace.spad.editor.VariableDeclarationAssign
import com.euclideanspace.spad.editor.FreeVariable
import com.euclideanspace.spad.editor.LocalVariable
import com.euclideanspace.spad.editor.TypeExpression
import com.euclideanspace.spad.editor.TypeParameterList
import com.euclideanspace.spad.editor.TypeArguments
import com.euclideanspace.spad.editor.TypeResult
import com.euclideanspace.spad.editor.TypePrimaryExpression
import com.euclideanspace.spad.editor.TypeNameOrFunctionCall
import com.euclideanspace.spad.editor.TypeNameOrFunctionCall2
import com.euclideanspace.spad.editor.TypeLiteral
import com.euclideanspace.spad.editor.Statement
import com.euclideanspace.spad.editor.Block
import com.euclideanspace.spad.editor.StatementExpression
import com.euclideanspace.spad.editor.ForStatement
import com.euclideanspace.spad.editor.WhileStatement
import com.euclideanspace.spad.editor.DoStatement
import com.euclideanspace.spad.editor.IterateStatement
import com.euclideanspace.spad.editor.BreakStatement
import com.euclideanspace.spad.editor.ReturnStatement
import com.euclideanspace.spad.editor.IfStatement
import com.euclideanspace.spad.editor.Expr
import com.euclideanspace.spad.editor.ConditionExpression
import com.euclideanspace.spad.editor.InnerProdExpression
import com.euclideanspace.spad.editor.OuterProdExpression
import com.euclideanspace.spad.editor.HasExpression
import com.euclideanspace.spad.editor.CaseExpression
import com.euclideanspace.spad.editor.EqualityExpression
import com.euclideanspace.spad.editor.RelationalExpression
import com.euclideanspace.spad.editor.IsExpression
import com.euclideanspace.spad.editor.SegmentExpression
import com.euclideanspace.spad.editor.AdditiveExpression
import com.euclideanspace.spad.editor.ExquoExpression
import com.euclideanspace.spad.editor.DivisionExpression
import com.euclideanspace.spad.editor.QuoExpression
import com.euclideanspace.spad.editor.ModExpression
import com.euclideanspace.spad.editor.RemExpression
import com.euclideanspace.spad.editor.MultiplicativeExpression
import com.euclideanspace.spad.editor.ExponentExpression
import com.euclideanspace.spad.editor.PretendExpression
import com.euclideanspace.spad.editor.HintTypeExpression
import com.euclideanspace.spad.editor.CoerceExpression
import com.euclideanspace.spad.editor.EltExpression
import com.euclideanspace.spad.editor.ExplicitTypeExpression
import com.euclideanspace.spad.editor.UnaryExpression
import com.euclideanspace.spad.editor.PrimaryPrefix
import com.euclideanspace.spad.editor.NameOrFunctionCall
import com.euclideanspace.spad.editor.Literal
import com.euclideanspace.spad.editor.CharacterLiteral
import com.euclideanspace.spad.editor.BooleanLiteral
import com.euclideanspace.spad.editor.ListLiteral

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class EditorLabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider {

	@Inject
	new(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	//Labels and icons can be computed like this:
	
	def String text(Model ele) {
	  return "Model";
	}
	
	def String text(CategoryDef ele) {
		    val StringBuilder builder = new StringBuilder();
		    builder.append(Strings.notNull(ele.getName()));
		    builder.append(" : "+ele.getLongname());
		    //append(builder, ele.getLongname());
		    return builder.toString();
	}

	def String text(PackageDef ele) {
	    val StringBuilder builder = new StringBuilder();
	    builder.append(Strings.notNull(ele.getName()));
	    builder.append(" : "+ele.getLongname());
	    //append(builder, ele.getType());
	    return builder.toString();
}

	def String text(DomainDef ele) {
	    val StringBuilder builder = new StringBuilder();
	    builder.append(Strings.notNull(ele.getName()));
	    builder.append(" : "+ele.getLongname5());
	    //append(builder, ele.getType());
	    return builder.toString();
}

	def String text(WherePart ele) {
		  return "WherePart :"+ele.getName();
	}

	def String text(WithPart ele) {
		  return "WithPart :"+ele.getName();
	}

	def String text(AddPart ele) {
		  return "AddPart :"+ele.getName();
	}

	def String text(AddStatements ele) {
		if (ele.getT1()!=null) return "AddStatements : if";
		if (ele.getT13()!=null) return "AddStatements : then";
		if (ele.getT14()!=null) return "AddStatements : else";
		if (ele.getT15()!=null) return "AddStatements : else";
		return "AddStatements : unknown";
	}

	def String text(FunctionDefinition ele) {
		if (ele.getPar3() != null)
		  return "Fn Def :"+ele.getPar3().getFnNam();
		return "Fn Def : no sig";
	}

	def String text(FunctionDefinitionBlock ele) {
		return "Fn Def Bk";
	}
	
/*	def String text(MapDefinition ele) {
		  return "MapDefinition :";
	}*/

	def String text(FunctionSignature ele) {
		  return "FunctionSignature :"+ele.getFnNam();
	}

	def String text(MacroDef ele) {
		  return "MacroDef :"+ele.getMacroname()+ele.getMacroname();
	}

	def String text(Import ele) {
		  return "Import :"+ele.getImpname();
	}

	def String text(VariableDeclaration ele) {
		  return "VariableDeclaration :"+ele.getV1();
	}

	def String text(VariableTyped ele) {
		  return "VariableTyped :"+ele.getVarName();
	}

	def String text(TypeWithName ele) {
		  return "TypeWithName :"+ele.getTyp();
	}

	def String text(VariableDeclarationBlock ele) {
		  return "VariableDeclarationBlock";
	}
	
	def String text(VariableDeclarationAssign ele) {
		  return "VariableDeclarationAssign :"+ele.getVarName();
	}

	def String text(FreeVariable ele) {
		  return "FreeVariable :"+ele.getVar();
	}

	def String text(LocalVariable ele) {
		  return "LocalVariable :"+ele.getVar();
	}

	/** t2=TypeArguments
     * t3=TypeResult
	 * t92=TypeArguments
     * t93=TypeResult
     *
     * TypePrimaryExpression
     */
	def String text(TypeExpression ele) {
		if (ele.getT2()!=null) return "TypeExpression("+ele.getT2()+")";
		if (ele.getT92()!=null) return "TypeExpression("+ele.getT92()+")";
		return "TypeExpression :"+ele;
	}

	def String text(TypeParameterList ele) {
		  return "TypeParameterList :"+ele.getTyname();
	}

	def String text(TypeArguments ele) {
		if (ele.isB1()) return "TypeArguments("+ele.getT4()+")";
		  return "TypeArguments";
	}

	def String text(TypeResult ele) {
		  return "TypeResult :"+ele.getTyname();
	}

	def String text(TypePrimaryExpression ele) {
	  return "TypePrimaryExpression" + ele;
	}

	//String text(TypePrimaryExpression2 ele) {
	//	  return "TypePrimaryExpression" + ele;
	//	}

	/** TypeNameOrFunctionCall
	 * 
	 * tfnname=ID
	 * ( t4=TypeExpression? (, t25+=TypeExpression)*)
     * t6=TypePrimaryExpression)?
	 */
	def String text(TypeNameOrFunctionCall ele) {
		var String n="TypeNameOrFunctionCall:"+ele.getTfnname();
		if (ele.getT4() != null) n=n+"t4="+ele.getT4();
		if (ele.getT6() != null) n=n+"t6="+ele.getT4();
		return n;		  
		//return commonTPE(ele,"TNFC");		  
	}

	def String text(TypeNameOrFunctionCall2 ele) {
		var String n="TypeNameOrFunctionCall:"+ele.getTfnname();
		if (ele.getT4() != null) n=n+"t4="+ele.getT4();
		if (ele.getT6() != null) n=n+"t6="+ele.getT4();
		return n;		  
		//return commonTPE(ele,"TNFC");		  
	}

	def String commonTPE(TypePrimaryExpression ele,String caller) {
		  if (ele.getT32() != null) {
			  if (ele.getT7() != null) return "TypePrimaryExpression:"+caller+"4 : Record "+ele.getT32();
			  if (ele.getT10() != null) return "TypePrimaryExpression:"+caller+"5 : Union "+ele.getT32();
			  if (ele.getT13() != null) return "TypePrimaryExpression:"+caller+"6 : Join "+ele.getT32();
			  return "TypePrimaryExpression1 :"+ele.getT32();
		  }
		  if (ele.getTyname() != null) return "TypePrimaryExpression:"+caller+"2 :"+ele.getTyname();
		  if (ele.getT5() != null) return "TypePrimaryExpression:"+caller+" : (...)";
		  if (ele.getT7() != null) return "TypePrimaryExpression:"+caller+" : Record?";
		  if (ele.getT10() != null) return "TypePrimaryExpression:"+caller+" : Union?";
		  if (ele.getT13() != null) return "TypePrimaryExpression:"+caller+" : Join?";
		  return "TypePrimaryExpression?"+caller+" : "+ele.getT32();
	}

    /* TypeLiteral 
     * t1=INT,t22=STRING,t4=CharacterLiteral,
     * t35=BooleanLiteral*/
    def String text(TypeLiteral ele) {
		  if (ele.getT22() != null) return "TypeLiteral :"+ele.getT22();
		  if (ele.getT35() != null) return "TypeLiteral :"+ele.getT35();
		  if (ele.getT34() != null) return "TypeLiteral :"+ele.getT34();
		  return commonTPE(ele,"TL")+ele.getT1();		  
		  //return "TypeLiteral :"+ele.getT1();
	}

	/*String commonTL(TypeLiteral ele) {
	}*/

	def String text(Statement ele) {
		  return "Statement :";
	}

	def String text(Block ele) {
		  return "Block :";
	}

	def String text(StatementExpression ele) {
		  return "StatementExpression :";
	}

	def String text(ForStatement ele) {
		  return "ForStatement :";
	}

	def String text(WhileStatement ele) {
		  return "WhileStatement :";
	}

	def String text(DoStatement ele) {
		  return "DoStatement :";
	}

	def String text(IterateStatement ele) {
		  return "IterateStatement :";
	}

	def String text(BreakStatement ele) {
		  return "BreakStatement :";
	}

	def String text(ReturnStatement ele) {
		  return "ReturnStatement :";
	}

	def String text(IfStatement ele) {
		return "IfStatement:";
//		if (ele.isB()) return "IfStatement: s11="+ele.getS11()+
//				  " s12="+ele.getS12();
//		return "IfStatement: s1="+ele.getS1()+
//				  " s2="+ele.getS2();
	}

/*	def String text(PredicateOr ele) {
		  return "PredicateOr :";
	}

	def String text(PredicateAnd ele) {
		  return "PredicateAnd :";
	}

	def String text(PredicateNot ele) {
		  return "IfStatement :";
	}

	def String text(PredicatePrimary ele) {
		  return "PredicatePrimary :";
	}*/

	def String text(Expr ele) {
		  return "Expr :"+ele.getIfname();
	}

	def String text(ConditionExpression ele) {
		  return "ConditionExpression :"+ele.getOp();
	}

	def String text(InnerProdExpression ele) {
		  return "InnerProdExpression :"+ele.getOp();
	}

	def String text(OuterProdExpression ele) {
		  return "OuterProdExpression :"+ele.getOp();
	}

	def String text(HasExpression ele) {
		  return "HasExpression :"+ele.getOp();
	}

	def String text(CaseExpression ele) {
		  return "CaseExpression :"+ele.getOp();
	}

	def String text(EqualityExpression ele) {
		  return "EqualityExpression :"+ele.getOp();
	}

	def String text(RelationalExpression ele) {
		  return "RelationalExpression :"+ele.getOp();
	}

	def String text(IsExpression ele) {
		  return "IsExpression :"+ele.getOp();
	}

	def String text(SegmentExpression ele) {
		  return "SegmentExpression :"+ele.getOp();
	}

	def String text(AdditiveExpression ele) {
		  return "AdditiveExpression :"+ele.getOp();
	}

	def String text(ExquoExpression ele) {
		  return "ExquoExpression :"+ele.getOp();
	}

	def String text(DivisionExpression ele) {
		  return "DivisionExpression :"+ele.getOp();
	}

	def String text(QuoExpression ele) {
		  return "QuoExpression :"+ele.getOp();
	}

	def String text(ModExpression ele) {
		  return "ModExpression :"+ele.getOp();
	}

	def String text(RemExpression ele) {
		  return "RemExpression :"+ele.getOp();
	}

	def String text(MultiplicativeExpression ele) {
		  return "MultiplicativeExpression :"+ele.getOp();
	}

	def String text(ExponentExpression ele) {
		  return "ExponentExpression :"+ele.getOp();
	}

	def String text(PretendExpression ele) {
		  return "PretendExpression :"+ele.getOp();
	}

	def String text(HintTypeExpression ele) {
		  return "HintTypeExpression :"+ele.getOp();
	}
	
	def String text(CoerceExpression ele) {
		  return "CoerceExpression :"+ele.getOp();
	}

	def String text(EltExpression ele) {
		  return "EltExpression :"+ele.getOp();
	}

	def String text(ExplicitTypeExpression ele) {
		  return "ExplicitTypeExpression :"+ele.getOp();
	}

	def String text(UnaryExpression ele) {
		  return "UnaryExpression :"+ele.getUop();
	}

/*	def String text(UnaryExpressionHash ele) {
		  return "UnaryExpressionHash :"+ele.getIfname();
	}*/

	def String text(PrimaryPrefix ele) {
		  return "PrimaryPrefix :"+ele.getIfname();
	}

	def String text(NameOrFunctionCall ele) {
		  return "NameOrFunctionCall :"+ele.getFnname();
	}

	def String text(Literal ele) {
		if (ele.getT2() != null)
          return "Literal :"+ele.getT2();
		return "Literal :"+ele.getValue();
	}

	def String text(CharacterLiteral ele) {
		  return "CharacterLiteral :"+ele.getC1();
	}

	def String text(BooleanLiteral ele) {
		  return "BooleanLiteral :"+ele.getLitname();
	}

	def String text(ListLiteral ele) {
		  return "ListLiteral :"+ele.getLitname();
	}

	/*	 
    def String image(MyModel ele) {
      return "MyModel.gif";
    }
*/
}

