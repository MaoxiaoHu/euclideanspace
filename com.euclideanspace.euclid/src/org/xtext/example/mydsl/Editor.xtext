grammar com.euclideanspace.euclid.Editor with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate euclidmodel "http://www.euclideanspace.com/euclid"

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations" as annotations
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

File returns EuclidFile :
    ('package' package=QualifiedName ';'?)?
(imports+=Import)*
(euclidTypes+=Type)*
;

Import returns EuclidImport :
'import' (
// (static?='static' extension?='extension'? importedType=[types::JvmType|QualifiedName] '.' '*')
   importedType=[types::JvmType|QualifiedName]
// importedNamespace=QualifiedName
  | importedNamespace=QualifiedNameWildCard) ';'?
;

QualifiedNameWildCard :
  QualifiedName '.' '*';

/*
 * This is a top level element such as:
 * class {EuclidClass}
 * interface {EuclidInterface}
 * enum {EuclidEnum}
 */
Type returns EuclidTypeDeclaration :
  {EuclidTypeDeclaration} annotations+=XAnnotation*
  ({EuclidClass.annotationInfo = current}
    'public'? abstract?='abstract'?
    'class' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
    ("extends" extends=JvmParameterizedTypeReference)?
    ('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?'{'
    (members+=Member)*
    '}'
    |{EuclidInterface.annotationInfo = current}
    'public'? abstract?='abstract'?
    'interface' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
    ('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?'{'
    (declarations+=Declaration)*
    '}'
    |{EuclidEnum.annotationInfo = current}
    'public'? abstract?='abstract'?
     'enum' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
     '{' enumConstants+=ID (',' enumConstants+=ID)* '}'
    |{EuclidAnnotationType.annotationInfo = current}
    'annotation' name=ValidID '{'
    (members+=AnnotationField)*
    '}'
  )
;

AnnotationField returns EuclidField :
  annotations+=XAnnotation*
  (type=JvmTypeReference | (final?='val' | 'var') type=JvmTypeReference?) name=ValidID ('=' initialValue=XExpression)? ';'?
;

/*
 * This is an inner element inside a class, interface or enum, such as:
 * 'val' or 'var' returns EuclidField
 * 'def' method returns EuclidFunction
 * inner class returns EuclidInnerClass
 */
Member returns EuclidMember:
  {EuclidMember} annotations+=XAnnotation*
  (
    {EuclidField.annotationInfo = current}
    visibility=Visibility?
    (extension?='extension' (final?='val' | 'var')? type=JvmTypeReference name=ValidID?
    | static?='static'? (type=JvmTypeReference | (final?='val' | 'var') type=JvmTypeReference?) name=ValidID)
    ('=' initialValue=XExpression)? ';'?
    | {EuclidInnerClass.annotationInfo = current}
    'class' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
    ("extends" extends=JvmParameterizedTypeReference)?
    ('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?
    '{' (members+=Member)* '}'
    | {EuclidFunction.annotationInfo = current}
    ('def' | override?='override') visibility=Visibility? static?='static'? (dispatch?='dispatch'?)
    ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
    ( =>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID '(')
    | =>(returnType=JvmTypeReference name=ValidID '(')
    | =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
    | name=ValidID '('
    )
    (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
    ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
    (expression=XBlockExpression)?
    | {EuclidConstructor.annotationInfo = current}
    visibility=Visibility? 'new'
    ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
    '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
    ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
    expression=XBlockExpression
) ;

Declaration returns EuclidDeclaration:
  //{EuclidDeclaration} annotations+=XAnnotation*
  (
    //{EuclidField.annotationInfo = current}
    visibility=Visibility?
    (extension?='extension' (final?='val' | 'var')? type=JvmTypeReference name=ValidID?
    | static?='static'?
      (type=JvmTypeReference | (final?='val' | 'var')
        type=JvmTypeReference?) name=ValidID) ';'?
    | //{EuclidFunction.annotationInfo = current}
    ('def' | override?='override') visibility=Visibility? static?='static'? (dispatch?='dispatch'?)
    ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
    ( =>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID '(')
    | =>(returnType=JvmTypeReference name=ValidID '(')
    | =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
    | name=ValidID '('
    )
    (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
    ('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
) ;

CreateExtensionInfo:
  'create' (name=ValidID ':')? createExpression=XExpression
;

ValidID:
  ID | 'create' | 'annotation'
;

Parameter returns EuclidParameter:
  annotations+=XAnnotation*
  parameterType=JvmTypeReference varArg?='...'? name=ValidID;

enum Visibility returns types::JvmVisibility:
  PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private';

XStringLiteral returns xbase::XExpression:
  SimpleStringLiteral
;

SimpleStringLiteral returns xbase::XExpression:
  {xbase::XStringLiteral} value=STRING
;