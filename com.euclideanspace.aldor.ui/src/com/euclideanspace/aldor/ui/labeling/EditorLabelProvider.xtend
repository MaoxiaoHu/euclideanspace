/*
* stub generated by Xtext
* customised by Martin Baker
*/
package com.euclideanspace.aldor.ui.labeling;

import com.google.inject.Inject
/* the following imports are interfaces for model elements */
import com.euclideanspace.aldor.editor.Model
import com.euclideanspace.aldor.editor.Expression
import com.euclideanspace.aldor.editor.Labeled
import com.euclideanspace.aldor.editor.Declaration
import com.euclideanspace.aldor.editor.DeclarationMacro
import com.euclideanspace.aldor.editor.DeclarationExtend
import com.euclideanspace.aldor.editor.DeclarationLocal
import com.euclideanspace.aldor.editor.DeclarationFree
import com.euclideanspace.aldor.editor.DeclarationFluid
import com.euclideanspace.aldor.editor.DeclarationDefault
import com.euclideanspace.aldor.editor.DeclarationDefine
import com.euclideanspace.aldor.editor.DeclarationFix
import com.euclideanspace.aldor.editor.DeclarationInline
import com.euclideanspace.aldor.editor.DeclarationImport
import com.euclideanspace.aldor.editor.DeclarationExport
import com.euclideanspace.aldor.editor.ExportDecl
import com.euclideanspace.aldor.editor.ToPart
import com.euclideanspace.aldor.editor.FromPart
import com.euclideanspace.aldor.editor.MacroBody
import com.euclideanspace.aldor.editor.Sig
import com.euclideanspace.aldor.editor.Comma
import com.euclideanspace.aldor.editor.CommaItem
import com.euclideanspace.aldor.editor.DeclBinding
import com.euclideanspace.aldor.editor.InfixedExprsDecl
import com.euclideanspace.aldor.editor.InfixedExprs
import com.euclideanspace.aldor.editor.Binding_AnyStatement
import com.euclideanspace.aldor.editor.Binding_BalStatement
import com.euclideanspace.aldor.editor.Binding_Collection
import com.euclideanspace.aldor.editor.BindingL_Infixed_AnyStatement
import com.euclideanspace.aldor.editor.BindingL_Infixed_BalStatement
import com.euclideanspace.aldor.editor.BindingL_Infixed_Collection
import com.euclideanspace.aldor.editor.BindingR_InfixedExprsDecl_AnyStatement
import com.euclideanspace.aldor.editor.AnyStatement
import com.euclideanspace.aldor.editor.BalStatement
import com.euclideanspace.aldor.editor.Flow_AnyStatement
import com.euclideanspace.aldor.editor.Flow_BalStatement
import com.euclideanspace.aldor.editor.GenBound
import com.euclideanspace.aldor.editor.ButExpr
import com.euclideanspace.aldor.editor.Cases
import com.euclideanspace.aldor.editor.AlwaysPart_AnyStatement
import com.euclideanspace.aldor.editor.AlwaysPart_BalStatement
import com.euclideanspace.aldor.editor.Collection
import com.euclideanspace.aldor.editor.Iterators
import com.euclideanspace.aldor.editor.Iterators1
import com.euclideanspace.aldor.editor.Iterator
import com.euclideanspace.aldor.editor.ForLhs
import com.euclideanspace.aldor.editor.SuchthatPart
import com.euclideanspace.aldor.editor.Infixed
import com.euclideanspace.aldor.editor.InfixedExpr
import com.euclideanspace.aldor.editor.Expr
import com.euclideanspace.aldor.editor.E3 
import com.euclideanspace.aldor.editor.E4
import com.euclideanspace.aldor.editor.E5
import com.euclideanspace.aldor.editor.E6
import com.euclideanspace.aldor.editor.E7
import com.euclideanspace.aldor.editor.E8
import com.euclideanspace.aldor.editor.E9
import com.euclideanspace.aldor.editor.E12
import com.euclideanspace.aldor.editor.Type
import com.euclideanspace.aldor.editor.QualTail
import com.euclideanspace.aldor.editor.OpQualTail
import com.euclideanspace.aldor.editor.E13
import com.euclideanspace.aldor.editor.E14
import com.euclideanspace.aldor.editor.Op
import com.euclideanspace.aldor.editor.Application
import com.euclideanspace.aldor.editor.RightJuxtaposed
import com.euclideanspace.aldor.editor.LeftJuxtaposed
import com.euclideanspace.aldor.editor.Jright_Molecule
import com.euclideanspace.aldor.editor.Jleft_Molecule
import com.euclideanspace.aldor.editor.Molecule
import com.euclideanspace.aldor.editor.Enclosure
import com.euclideanspace.aldor.editor.DeclMolecule
import com.euclideanspace.aldor.editor.BlockMolecule
import com.euclideanspace.aldor.editor.BlockEnclosure
import com.euclideanspace.aldor.editor.Block
import com.euclideanspace.aldor.editor.Parened
import com.euclideanspace.aldor.editor.Bracketed
import com.euclideanspace.aldor.editor.QuotedIds
import com.euclideanspace.aldor.editor.Names
import com.euclideanspace.aldor.editor.Atom
import com.euclideanspace.aldor.editor.CurlyContentsList_Labeled
import com.euclideanspace.aldor.editor.CurlyContentB_Labeled
import com.euclideanspace.aldor.editor.ArrowTok
import com.euclideanspace.aldor.editor.LatticeTok
import com.euclideanspace.aldor.editor.RelationTok
import com.euclideanspace.aldor.editor.SegTok
import com.euclideanspace.aldor.editor.PlusTok
import com.euclideanspace.aldor.editor.QuotientTok
import com.euclideanspace.aldor.editor.TimesTok
import com.euclideanspace.aldor.editor.PowerTok
import javax.lang.model.element.Name
import com.euclideanspace.aldor.editor.Jright_Atom
import com.euclideanspace.aldor.editor.Jleft_Atom

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class EditorLabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider {

	@Inject
	new(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def String text(Model ele) {
	  return "Model";
	}

	def String text(Expression ele) {
	  return "Expression";
	}

	def String text(Labeled ele) {
	  if (ele.c!=null)  return "Labeled:comma";
	  if (ele.d!=null)  return "Labeled:declaration";
	  return "Labeled:atom";
	}

	def String text(Declaration ele) {
	  return "Declaration";
	}

	def String text(DeclarationMacro ele) {
	  return "DeclarationMacro";
	}

	def String text(DeclarationExtend ele) {
	  return "DeclarationExtend";
	}

	def String text(DeclarationLocal ele) {
	  return "DeclarationLocal";
	}

	def String text(DeclarationFree ele) {
	  return "Declaration";
	}

	def String text(DeclarationFluid ele) {
	  return "Declaration";
	}

	def String text(DeclarationDefault ele) {
	  return "DeclarationDefault";
	}

	def String text(DeclarationDefine ele) {
	  return "DeclarationDefine";
	}

	def String text(DeclarationFix ele) {
	  return "DeclarationFix";
	}

	def String text(DeclarationInline ele) {
	  return "DeclarationInline";
	}

	def String text(DeclarationImport ele) {
	  return "DeclarationImport";
	}

	def String text(DeclarationExport ele) {
	  return "DeclarationExport";
	}

	def String text(ExportDecl ele) {
//	  return "ExportDecl:"+ele.s;
	  return "ExportDecl:";
	}

	def String text(ToPart ele) {
	  return "ToPart";
	}

	def String text(FromPart ele) {
	  return "FromPart";
	}

	def String text(MacroBody ele) {
	  return "MacroBody";
	}

	def String text(Sig ele) {
	  return "Sig";
	}

//	def String text(DeclPart ele) {
//	  return "DeclPart";
//	}

	def String text(Comma ele) {
	  return "Comma";
	}

	def String text(CommaItem ele) {
	  return "CommaItem";//+ele.ci;
	}

	def String text(DeclBinding ele) {
	  return "DeclBinding";
	}

	def String text(InfixedExprsDecl ele) {
	  return "InfixedExprsDecl";
	}

	def String text(InfixedExprs ele) {
	  return "InfixedExprs";
	}

	def String text(Binding_AnyStatement ele) {
	  return "Binding_AnyStatement";
	}

	def String text(Binding_BalStatement ele) {
	  return "Binding_BalStatement";
	}

	def String text(Binding_Collection ele) {
	  return "Binding_Collection";
	}

	def String text(BindingL_Infixed_AnyStatement ele) {
		if(ele.bas9!=null) return "BindingL_Infixed_AnyStatement:no op";
		return "BindingL_Infixed_AnyStatement "+ele.op;
	}

	def String text(BindingL_Infixed_BalStatement ele) {
		if(ele.bas9!=null) return "BindingL_Infixed_BalStatement:no op";
		return "BindingL_Infixed_BalStatement "+ele.op;
	}

	def String text(BindingL_Infixed_Collection ele) {
		if(ele.bas9!=null) return "BindingL_Infixed_Collection:no op";
		return "BindingL_Infixed_Collection "+ele.op;
	}

	def String text(BindingR_InfixedExprsDecl_AnyStatement ele) {
		  return "BindingR_InfixedExprsDecl_AnyStatement";
	}

	def String text(AnyStatement ele) {
		return "AnyStatement";
	}

	def String text(BalStatement ele) {
		return "BalStatement";
	}

	def String text(Flow_AnyStatement ele) {
		if (ele.getSt()!=null)  return "Flow_AnyStatement :"+ele.getSt();
		return "Flow_AnyStatement:collection";
	}

	def String text(Flow_BalStatement ele) {
		if (ele.getSt2()!=null)  return "Flow_BalStatement :"+ele.getSt2();
		return "Flow_BalStatement:collection";
	}

	def String text(GenBound ele) {
		return "GenBound";
	}

	def String text(ButExpr ele) {
		return "ButExpr";
	}

	def String text(Cases ele) {
		return "Cases";
	}

	def String text(AlwaysPart_AnyStatement ele) {
		return "AlwaysPart_AnyStatement";
	}

	def String text(AlwaysPart_BalStatement ele) {
		return "AlwaysPart_BalStatement";
	}

	def String text(Collection ele) {
//		  return "Collection :"+ele.getI3();
		  return "Collection";
	}

	def String text(Iterators ele) {
		return "Iterators";
	}

	def String text(Iterators1 ele) {
		var int subnodes=0;
		if (ele.itr!=null) {
			ele.itr.size();
		}
		return "Iterators1 num="+subnodes;
	}

	def String text(Iterator ele) {
		return "Iterator";
	}

	def String text(ForLhs ele) {
		return "ForLhs";
	}

	def String text(SuchthatPart ele) {
		return "SuchthatPart";
	}

	def String text(Infixed ele) {
		if (ele.dp!=null) return "Infixed:typed (a:b)";
		if (ele.ifx!=null) return "Infixed:expression";
		return "Infixed:block";
	}

	def String text(InfixedExpr ele) {
		return "InfixedExpr";
	}

	def String text(Expr ele) {
		  //return "E3 :"+ele.getLeft()+" "+ele.getOp()+" "+ele.getRight();
		  return "Expr";
	}

	def String text(E3 ele) {
		  //return "E3 :"+ele.getLeft()+" "+ele.getOp()+" "+ele.getRight();
		  return "E3 "+ele.op;
	}

	def String text(E4 ele) {
		  //return "E4 :"+ele.getLeft()+" "+ele.getOp()+" "+ele.getRight();
		  return "E4 "+ele.op;
	}

	def String text(E5 ele) {
		  //return "E5 :"+ele.getLeft()+" "+ele.getOp5()+" "+ele.getRight();
		  return "E5 "+ele.op;
	}

	def String text(E6 ele) {
		  //return "E6 :"+ele.getLeft()+" "+ele.getOp6()+" "+ele.getRight();
		  return "E6 "+ele.op;
	}

	def String text(E7 ele) {
		  //return "E7 :"+ele.getLeft()+" "+ele.getOp7()+" "+ele.getRight();
		  return "E7 "+ele.op;
	}

	def String text(E8 ele) {
		  //return "E8 :"+ele.getLeft()+" "+ele.getOp8()+" "+ele.getRight();
		  return "E8 "+ele.op;
	}

	def String text(E9 ele) {
		  //return "E9 :"+ele.getLeft()+" "+ele.getOp9()+" "+ele.getRight();
		  return "E9 "+ele.op;
	}

//	def String text(E11_E12 ele) {
		  //return "E11_E12 :"+ele.getLeft()+" "+ele.getOp()+" "+ele.getRight();
//		  return "E11_E12 ";//+ele.op;
//	}

//	def String text(E11_Op ele) {
		  //return "E11_Op :"+ele.getLeft()+" "+ele.getOp()+" "+ele.getRight();
//		  return "E11_Op ";//+ele.op;
//	}

	def String text(E12 ele) {
		  //return "E12 :"+ele.getLeft()+" "+ele.getOp()+" "+ele.getRight();
		  return "E12 "+ele.op;
	}
	
	def String text(Type ele) {
		  return "Type";//+ele.op;
	}
	
	def String text(QualTail ele) {
		  return "QualTail";//+ele.op;
	}
	
	def String text(OpQualTail ele) {
		  return "OpQualTail ";//+ele.op;
	}

	def String text(E13 ele) {
		  //return "E13 :"+ele.getLeft()+" "+ele.getOp()+" "+ele.getRight();
		  return "E13 "+ele.op;
	}

	def String text(E14 ele) {
		  //return "E14 :"+ele.getE15left()+" "+ele.getDm()+" "+ele.getE15right();
		  return "E14 "+ele.op;
	}

	def String text(Op ele) {
//		  return "Op :"+ele.getAop();
		  return "Op";
	}

	def String text(Application ele) {
		  return "Application";
	}

	def String text(RightJuxtaposed ele) {
		  return "RightJuxtaposed";
	}

	def String text(LeftJuxtaposed ele) {
		  return "LeftJuxtaposed";
	}

  	def String text(Jright_Molecule ele) {
		  return "Jright_Molecule";
	}

    /*
     * 
     */
	def String text(Jright_Atom ele) {
		  return "Jright_Atom";
	}

    /*
     * when uncommented no subnodes shown
     * Unhandled event loop exception
     * TODO re enable parameter display and check if it causes Unhandled event loop exception
     */
 	def String text(Jleft_Molecule ele) {
	  if (ele.m !=null) return "Jleft_Molecule m="+ele.m;		
	  if (ele.m2 !=null) return "Jleft_Molecule";		
	  if (ele.be !=null) return "Jleft_Molecule #be="+ele.be.size();		
	  return "Jleft_Molecule";
	}

    /*
     *
     */
	def String text(Jleft_Atom ele) {
	  if (ele.a !=null) return "Jleft_Molecule a="+ele.a;		
	  return "Jleft_Atom";
	}

	def String text(Molecule ele) {
		  return "Molecule";
	}

	def String text(Enclosure ele) {
		  return "Enclosure";
	}

	def String text(DeclMolecule ele) {
		  return "DeclMolecule";
	}

	def String text(BlockMolecule ele) {
		  return "BlockMolecule";
	}

	def String text(BlockEnclosure ele) {
		  return "BlockEnclosure";
	}

	def String text(Block ele) {
		  return "Block";
	}

	def String text(Parened ele) {
		  return "Parened";//+ele.getOp()+" "+ele.getE();
	}

 	def String text(Bracketed ele) {
		  return "Bracketed";//+ele.getOp()+" "+ele.getE();
	}

	def String text(QuotedIds ele) {
		  return "QuotedIds";//+ele.getOp()+" "+ele.getN();
	}

	def String text(Names ele) {
		  return "Names";//+ele.getFirstName();
	}

	def String text(Name ele) {
		  return "Name";//+ele.getFirstName();
	}

	def String text(Atom ele) {
	  if (ele.iden !=null) return "Atom id:"+ele.iden;		
	  if (ele.lit !=null) return "Atom lit:"+ele.lit;		
	  return "Atom";
	}

//	def String text(Id ele) {
//		  return "Id";//+ele.getAB_Id();
//	}

	def String text(ArrowTok ele) {
		  return "ArrowTok";
	}
	
	def String text(LatticeTok ele) {
		  return "LatticeTok";
	}
	
	def String text(RelationTok ele) {
		  return "RelationTok";
	}
	
	def String text(SegTok ele) {
		  return "SegTok";
	}
	
	def String text(PlusTok ele) {
		  return "PlusTok";
	}
	
	def String text(QuotientTok ele) {
		  return "QuotientTok";
	}
	
	def String text(TimesTok ele) {
		  return "TimesTok";
	}
	
	def String text(PowerTok ele) {
		  return "PowerTok";
	}

//	def String text(QualOp_ArrowTok ele) {
//		  return "QualOp_ArrowTok :"+ele.getOqt();
//	}

//	def String text(QualOp_LatticeTok ele) {
//		  return "QualOp_LatticeTok :"+ele.getOqt();
//	}

//	def String text(QualOp_RelationTok ele) {
//		  return "QualOp_RelationTok :"+ele.getOqt();
//	}

//	def String text(QualOp_SegTok ele) {
//		  return "QualOp_SegTok :"+ele.getOqt();
//	}

//	def String text(QualOp_PlusTok ele) {
//		  return "QualOp_PlusTok :"+ele.getOqt();
//	}

//	def String text(QualOp_QuotientTok ele) {
//		  return "QualOp_QuotientTok :"+ele.getOqt();
//	}

//	def String text(QualOp_TimesTok ele) {
//		  return "QualOp_TimesTok :"+ele.getOqt();
//	}

//	def String text(QualOp_PowerTok ele) {
//		  return "QualOp_PowerTok :"+ele.getOqt();
//	}

	def String text(CurlyContentsList_Labeled ele) {
//		  return "CurlyContentsList_Labeled :"+ele.statemts;
      return "CurlyContentsList_Labeled"
	}

	def String text(CurlyContentB_Labeled ele) {
//		if (ele.getPred()!=null)  return "CurlyContentB_Labeled :"+ele.getPred();
//		if (ele.getL()!=null)  return "CurlyContentB_Labeled :"+ele.getL();
//		return "CurlyContentB_Labeled : "+ele.getPd();
      return "CurlyContentB_Labeled"
	}

}
